#include <iostream>
#include <ctime>
#include <cstdlib>
#include <omp.h>

using namespace std;

void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n - 1; ++i) {
        for (int j = 0; j < n - i - 1; ++j) {
            if (arr[j] > arr[j + 1]) {
                swap(arr[j], arr[j + 1]);
            }
        }
    }
}

void printArray(int arr[], int size) {
    for (int i = 0; i < size; ++i) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

int main() {
    int n;
    cout << "Enter the size of the array: ";
    cin >> n;

    int* arr = new int[n];
    srand(time(0));
    for (int i = 0; i < n; ++i) {
        arr[i] = rand() % 100;
    }

    int* temp = new int[n];
    copy(arr, arr + n, temp);

    // Sequential Bubble Sort
    clock_t start = clock();
    bubbleSort(arr, n);
    clock_t end = clock();
    double seqTime = double(end - start) / CLOCKS_PER_SEC;

    // Parallel Bubble Sort (still effectively sequential due to nature of the algorithm)
    copy(temp, temp + n, arr); // Reset array
    start = clock();
    #pragma omp parallel
    {
        #pragma omp single
        bubbleSort(arr, n);
    }
    end = clock();
    double parTime = double(end - start) / CLOCKS_PER_SEC;

    cout << "Sequential Bubble Sort Time: " << seqTime << " seconds" << endl;
    cout << "Parallel Bubble Sort Time: " << parTime << " seconds" << endl;

    delete[] arr;
    delete[] temp;

    return 0;
}
