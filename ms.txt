#include <iostream>
#include <ctime>
#include <cstdlib>
#include <omp.h>

using namespace std;

void merge(int arr[], int l, int m, int r) {
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;

    int* L = new int[n1];
    int* R = new int[n2];

    for (i = 0; i < n1; ++i) L[i] = arr[l + i];
    for (j = 0; j < n2; ++j) R[j] = arr[m + 1 + j];

    i = 0; j = 0; k = l;

    while (i < n1 && j < n2) {
        arr[k++] = (L[i] <= R[j]) ? L[i++] : R[j++];
    }

    while (i < n1) arr[k++] = L[i++];
    while (j < n2) arr[k++] = R[j++];

    delete[] L;
    delete[] R;
}

void mergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        #pragma omp parallel sections
        {
            #pragma omp section
            mergeSort(arr, l, m);
            #pragma omp section
            mergeSort(arr, m + 1, r);
        }
        merge(arr, l, m, r);
    }
}

void seqMergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        seqMergeSort(arr, l, m);
        seqMergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

int main() {
    int n;
    cout << "Enter the size of the array: ";
    cin >> n;

    int* arr = new int[n];
    srand(time(0));
    for (int i = 0; i < n; ++i) arr[i] = rand() % 100;

    int* temp = new int[n];
    copy(arr, arr + n, temp);

    // Sequential Merge Sort
    clock_t start = clock();
    seqMergeSort(arr, 0, n - 1);
    clock_t end = clock();
    double seqTime = double(end - start) / CLOCKS_PER_SEC;

    // Parallel Merge Sort
    copy(temp, temp + n, arr);
    start = clock();
    #pragma omp parallel
    {
        #pragma omp single
        mergeSort(arr, 0, n - 1);
    }
    end = clock();
    double parTime = double(end - start) / CLOCKS_PER_SEC;

    cout << "Sequential Merge Sort Time: " << seqTime << " seconds" << endl;
    cout << "Parallel Merge Sort Time: " << parTime << " seconds" << endl;

    delete[] arr;
    delete[] temp;

    return 0;
}
